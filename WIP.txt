
WORK IN PROGRESS
================



Recursive Patterns :

!!!  fix the "cannot connect sub-area" problem

-  pure patterns : have two basic kinds (I and P) and ensure
   no (or little) overlap in the sizes which can use them
   (in particular : I pattern should be tall and narrow)

-  recursive patterns : in sizes support a '+' symbol (or?) which
   means that the size must be (e.g.) 6 seeds _or_more_
   e.g. "3+13+'

   also: ranges like '3-7'
   also: spaces for legibility
   also : 'R' means to repeat previous size range

-  recursive : figure out how to handle symmetry

IDEA: '?' in patterns means "don't care" / "filler"
      the chunk becomes same as a nearby sub-area cell
      if installed on a conn (etc), require neighbor to be walk

IDEA: fency patterns (between two sub-areas and/or normal area <-> sub-area)
      _OR_ pick a certain floor to be "fency"

-  recursive : when stair goes INTO a sub-area, it means all its floors
               should have HIGHER vhr than any in the outer pattern,
               or should be LOWER vhr than any in outer pattern
               [ pick UP or DOWN based on z_dir ]

               if stair into sub-area would hit 3D floor (above normal floor)
               then pick _LOW_ one when stair goes up, and _HIGH_ one when
               stair goes down.

               disallow stairs FROM a sub-area

+  recursive patterns!
   DONE:  use 'a', 'b', 'c' and 'd' instead of '1', '2' (etc)

   -  detect if no stair was used, automatically and randomly
      pick "intra conn" when installing into the room

   -  have "floor_groups" -- each seed in the group must get the
      same VHR floor [ probably OK if different floors above/below ]

   -  perhaps have "recurse = onion" patterns, and we try a certain
      quota (based on depth) of these BEFORE all other patterns.

IDEA:  auto-sub-areas : in huge room, sub-divide into smaller rectangles
       and place "intra connections" between them.  Place patterns in
       each sub-area, ensuring the intra connections are "floor".


Layout rework:

-  sometimes make a floor use same material as top (not room wall)

-  give lower chunk (if two) a ceil_h

+  create chunks for ALL non-cave rooms

-  CHUNK_CLASS ?   put in seed.lua

-  CHUNK.content (not SEED.content)

-  link chunks together

-  create chunks for flat square room
   V
-  split big chunks: 4 = 2/2  5 = 2/1/2 or 1/3/1  6 = 2/2/2  (etc)
   (maintain symmetry if chunk straddles middle of room)

-  split any chunks which contain TWO importants or conns
   (detect if horiz or vertical, and where)

IDEA:  automatically merge 2x2 seeds (if floor) into a single chunk

+  get curved stairs working again

+  get diagonals working again


3D Floors:
-  light from above can "go right through"

-  next to room with liquid -- odd gap is possible


Junking:
-  caves: sometimes junk a side or two
   - only at edge of map (?)
   - 1 or 2 seeds deep

-  normal junking : upto 2 seeds at edge of map


Closets and Traps:
-  can use unused seeds [inside map area]
-  can use junked parts of a room
-  can use a SOLID seed in a pattern (c.f. cage code)

-  can steal part of a nearby scenic, but require all three sides
   (and two diagonals) to remain part of scenic room


Doors
-  Door_with_bars : use it
+  make a dark-metal switch for Door_with_bars
-  make a two seed wide door prefab
-  support wide doors [normal / locked]
-  make wide prefab with a switch in it [normal door]
-  texturing on door prefabs (for HELL, URBAN themes)


Cave lighting:
-  keys / switches (etc) should be lit up



MISCELLANEA
===========


RAIL ISSUE : cannot control offsets on BACK SIDE of a brush vert
--->  test new logic....

Review spot handling in Cave code

rocky_exit : switch can be stretched

