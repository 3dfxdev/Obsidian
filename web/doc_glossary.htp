<set O_WHERE="Glossary">

<file include="x_common.inc">
<file include="x_header.inc">

<use DocMENU>

<div class="submenu">
<use SubSpacer>
<use DocUsage>
<use DocAbout>
<use DocCredits>
<use DocFAQ>
<use SubWhere where="GLOSSARY">
<use DocHistory>
</div>

<div class="rest">


<h3> GLOSSARY OF TERMS </h3>

<div id="brush" class="gloss_term">
Brush
</div><div class="gloss_define">
This is a term borrowed from Quake mapping.
A brush is a solid area in 3D space.
Levels are built by placing a lot of brushes everywhere.
For example, the floor you are standing on will be one brush,
and the ceiling overhead will another one.
Stuff like doors are built from many brushes.

<p>
In OBLIGE, brushes consists of a top face, a bottom face, and
a group of side faces.
The top and bottom are usually flat but may be sloped,
whereas the sides are always perfectly vertical.

<p>
<i>(See also.... CSG, Entity)</i>

</div>


<div id="cell" class="gloss_term">
Cell
</div><div class="gloss_define">
In the old (V2) code this meant a single room.  Each cell
consisted of 3x3 "chunks" (which are now called Seeds)
where each chunk could be a floor, stair, pillar (etc) and the
room was surrounded by a 64-unit thick wall.

<p>
In the new code, rooms are no longer a fixed size, they
can be as small as 2x2 seeds or bigger than 9x9, and the walls
are no longer separate but "eat" into seeds
(and are thinner too).
</div>


<div id="cell" class="gloss_term">
CSG
</div><div class="gloss_define">
CSG stands for "Constructive Solid Geometry".
For OBLIGE it means the process of taking all the brushes
which define the map (most of them are solid), and constructing
the output map format from them, e.g. the Doom WAD file
or the Quake BSP file.
</div>


<div id="engine" class="gloss_term">
Engine / Port
</div><div class="gloss_define">
When Carmack released the DOOM source code, many different people
hacked away on it and produced their own version of the EXE,
often with greatly expanded capabilities.  Examples include BOOM,
EDGE, Legacy and ZDoom.
The same thing happened when he released the QUAKE source code,
people made engines such as Darkplaces, FitzQuake, and ZQuake.

<p>
Hence the term "Engine" or "Source Port" usually refer to one of
these enhanced versions of the game, but it can also mean the original
EXE which the game came with when you bought it.  That one is
often called "Vanilla", since nothing extra has been added to it.

<p>
<i>(See also.... Limit Removing)</i>

</div>


<div id="entity" class="gloss_term">
Entity
</div><div class="gloss_define">
This is another term from Quake, and means an object or thing in the map.
Monsters, weapons, player starts, ammo, health, barrels, torches (etc etc)
are all entities.
</div>


<div id="limit_removing" class="gloss_term">
Limit Removing
</div><div class="gloss_define">
A "Limit Removing" engine is one which people have removed some
limitations that the original game had.
For example, plain DOOM.EXE will crash if there are more than 128
visplanes on the screen -- the VPO (Visplane Overflow) error which
was a real nuisance to mappers.

<p>
However source ports like BOOM have removed this limitation
(and others), and there can be as many visplanes on the screen
as necessary to draw the level.

<p>
OBLIGE needs a Limit Removing engine because it is impossible
for it to figure out when the visplane limit is going to be
exceeded -- it depends greatly on the architecture of the map.
The only way to keep within those limitations would be to
produce very flat, boring, mostly-indoor maps with nothing
much to look at.
</div>


<!---
Lua
--->


<!---
Material
--->


<div id="mega_seed" class="gloss_term">
Mega-Seed
</div><div class="gloss_define">
An area on the map consisting of more than one seed, used to
create larger structures (like wide doors or big prefabs)
which normally cannot fit in a single seed.

<p>
<i>(See also.... Seed)</i>

</div>


<div id="prefab" class="gloss_term">
Prefab
</div><div class="gloss_define">
A mapping structure, such as a window or door, whose shape
and texturing have been previously designed by a person.
This is in contrast to stuff like caves which are generated
purely by an algorithm.
</div>


<div id="prebuilt_level" class="gloss_term">
Prebuilt Level
</div><div class="gloss_define">
Levels which are not generated by Oblige, instead they are
made by a human and Oblige merely copies them into the
output file.
Boss maps usually have special requirements which are
hard to account for.
It is much easier for someone to simply make them
in a map editor.
</div>


<div id="seed" class="gloss_term">
Seed
</div><div class="gloss_define">
In the GUI, the seed is a 5-digit value which is used to
setup the random-number generator.  The same seed value
produces the same random numbers, and hence the same levels
(when all other settings are the same).
The top three digits are guaranteed to be different on
different days, so it would take about 16 months before
they start repeating.
The BUMP button only changes the bottom two digits.

<p>
In the Lua code, a seed is a square region on the 2D map.
The size is usually 192x192 units, but this can depend on the
selected game.
Each seed represents a single mapping concept,
such as a walkway, stair, lift, switch, pillar, or a spot for a
monster.  The sides of each seed can be used for walls, doors,
windows, etc...
The decisions about where to place rooms, how big they are,
and how they are connected are all done using seeds.
</div>


<div id="scenic" class="gloss_term">
Scenic
</div><div class="gloss_define">
A room or area which the player never visits, and is only used
for decoration.
</div>


<div id="sub_room" class="gloss_term">
Sub-Room
</div><div class="gloss_define">
A room which lies inside another room.  The sub-room is also
called the child and the outer room is the parent.
</div>


<!---
Sub-Theme
--->


<div id="svn" class="gloss_term">
SVN
</div><div class="gloss_define">
SVN is short for Subversion, which is a development tool
for storing code on a server computer and letting multiple
people edit that code, using copies on their own computers.
It ensures that each developer's
changes get distributed to everyone else.
It also stores a history of all changes, where each change
has message describing what was done.

<p>
You can view Oblige's SVN respository here:
<a href="http://oblige.svn.sourceforge.net/viewvc/oblige/trunk">
Browse Code</a>

<!--- LINK to subversion sight or SourceForge page about it --->

</div>
  

<div id="v1" class="gloss_term">
V1
</div><div class="gloss_define">
The very first prototype of OBLIGE.
It could not do very much and was never publicly released.
</div>


<div id="v2" class="gloss_term">
V2 / OB2
</div><div class="gloss_define">
The older versions of OBLIGE, with
version numbers starting with zero (such as 0.85).

</div>


<div id="v3" class="gloss_term">
V3 / OB3
</div><div class="gloss_define">
The current versions of OBLIGE,
which began with version 3.39.

<p>
<i>(see the <a href="doc_history.html">History</a> page for more
information about V1, V2, and V3)</i>

</div>


</div class="rest">

<file include="x_footer.inc">

