
WORK IN PROGRESS
================


CLOSETS:

!!  create proper EDGE where it joins room (based on SHAPE)
    [ needed for JOINERS too ]

+  monster trap!

-  item closet



STAIRS:

+  need to support building the ceiling "normally"
   [ specified by prefab ]

+  choose prefabs earlier, probably during floor/ceil heights

-  put all stairs made by a rule (INCL. mirrored ones) into a group,
   and ensure only a single prefab kind is used for that group

   [ do same for "rect" parts of a grammar rule ]



JOINERS:

+  choose prefab earlier, e.g. during floor/ceil heights or earlier



PREFAB SYSTEM:

+  remove 'env' from Fab_pick()

-  fix "rank" handling in Fab_pick when alt_req is used

+  figure out semantics of seed_w/seed_h and ROTATING prefabs
   -  if there is a natural direction (e.g. closet facing into room),
      then it is simple (rotation not possible)

+  define 'seed_w/h' in a prefab to be minimum size

-  allow 'max_seed_w, max_seed_h' to be maximum size
   __OR__ : seed_w = { 1,3 }



Hard-coded prefab names :
  Arch_plain
  Item_pedestal

  (many more not currently used)



CAGES:

-  probably remove as a rect, only use "C" for LARGE cages

-  ability to make them in "T" closet rects



SHAPE GRAMMARS:

   -  each level has different factors for all grammar rules

      factor = rand.pick({ 0.1, 0.3, 0.7, 1.0 })
      if rand.odds(50) then factor = 1 / factor end
      new_prob = old_prob * factor

   idea: have "elements" table indexed by a seed coord

      elements =
      {
        3_4  = { .... }
        2_1B = { ... }
        2_1T = { ... }
      }

   Q/ can do windows using them?  pictures??

   -  allow TWO conns into a new room (become F1/F2 in CONN object)

   +  prune / re-use rooms which remain small, and hallways which
      never end up anywhere else

   +  symmetrical rooms
      +  join mirrored RECTS (the final areas) with 'peer' field

      -  mark a RECT created by a "straddling" rule
         [ increased score for wotsit finding ]

      ?? join mirrored seeds with 'peer' field

      +  a way to score "straddling" patterns higher
         [ they are a very good place for some stuff, e.g. exits ]
         [[ only first usage of SPROUT/DECOR needs to score higher ]]

      -  SPROUT pass : try some without a mirrored half

      -  SPROUT: if mirrored and new rooms touch/overlap, only create
                 a single room

   idea:  'O' used in matches for "open" part of room (floor/stair/liquid)

   idea:  'a', 'b', 'c' matches anything but "1", "2", "3"
          Q/ does "anything" included empty space / other rooms?

   idea:  CYCLE pass (after SPROUT) for multiple paths
          [ probably as 'H' hallways, allow these to grow, prune them
            when they fail to connect ]

   idea:  for CTF, create one big room with "rotate" symmetry
          [ interleave GROW and SPROUT passes ]
          [[ "new_room" becomes "new_area" but acting like a new room ]]



HALLWAYS:

-  'H' in grammar rules (see above)

-  treat as an area of room which it sprouts off, but have special
   rules for making them (e.g. low heights, different textures)

-  hallways don't count when checking room size



MISC:

-  titlepic backgrounds (current and new) :
   determine ones for official package, put rest in an addon

+  face direction for switches

