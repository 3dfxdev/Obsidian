
TODO
====


>>>> document classes (PLAN, SEED, ROOM, QUEST)


THEME SELECTION

(a) Each level has a THEME, e.g. "Tech"

(b) User can select what theme to use ---> case closed

(c) For "mixed" select a random theme, bearing in mind:
    (i) secret levels can choose something whacky
    (ii) One-Episode: use 'epi_prob', group same themes together
    (iii) Full-Game: prefer episodes to have whole theme
                     (with one or two breakers), and prefer
                     theme to match sky


Room Fitting Out
----------------

DESCRIPTION OF PROBLEM:
+ Primary goal is to ensure all exit seeds in a room
  are traversable, i.e. there exists a path from X to Y
  such that each element is either a symbolic height ('0' .. '3')
  or a staircase ('>', '<', 'v', '^', 'F', 'T', 'L', 'J').

  Certain staircases are never usable on certain rows or
  columns (e.g. cannot use 'F' on top row if vertically mirrored).

  In emergencies we can mark certain seeds as "laddering"
  onto an adjacent height-difference seed.  We must try hard
  to (a) avoid this or (b) minimise its use and (c) pick
  the best seed pair to ladder [not an exit seed, low diff, etc]

+ Secondary goal is "niceness" of the room layout:
  (a) staircases are not used in two adjacent seeds

  (b) F/T/L/J staircases only used in corners
      (or "pseudo-corners" i.e. floor seeds at higher heights)

  (c) height diff between staircases is '1' unit
      [any is possible, the lower the better]

  (d) small preference for staircases parallel to main direction
      of room (esp. PC/PR/PX and TY types).

+ Tertiary goal is to assign diagonal corners and solid
  seeds, as well as flood filling floor heights, in a
  pleasing/interesting way.


IDEA:
  Primitive operations:

  1) start at exit A, go (anti)clockwise around the edge of the
     room until hit exit B, use suitable connections
     (especially corner stairwells).

  2) start at exit A, go inward until hit exit B.
     If hit a blank wall instead, assume hit the R.floor_h
     seed [if none: one closer to it] and put stairs
     appropriately for that.

  3) start at exit A, go inward a certain dist then turn left
     or right and run towards exit B.

  3) ?? void up edges [if not empty, replicated exit seeds into inner area]
  4) ?? ledge up edges [need exits all at same height, or use R.floor_h]

  Repeat the primitive operations for random exit seeds
  until full traversibility is reached (or run out of
  usable directions]

  Add emergency "ladders" when no more traversifying can be done.

  Score the final result.  Perform ### fillings for each room
  and pick the one with the best result.

  [Can fill holes and decide solid corners last]



- height diffs:
  - basic (if all else fails) algorithm:
    flood fill heights from conn seeds to remaining seeds
    [BUT: floor_h of room
    add a stair seed at some meeting spots

    if height diff is huge, deserves more seeds

  - patterns:
    (a) L shape is nice
    (b) U shape is possible
    (c) plain side fill (two deep if room is big)

- no height diff
  - sometimes make Walkway-Over-Nukage
  - sometimes have a nukage pit
  
- ceilings:
  - big room with no sky neighbours: have a huge sky hole

- pillars are good (except when too close to exits)



IDEA:  liquid patterns: chance of "beaching" it


Fight Sim: reimplement monster-weapon preferences
Fight Sim: handle weapon immunity [e.g. Shambler] --> abuse weap prefs
  
  >>>  PREFS["rocket@shambler"] = 0.1
       PREFS["launch@skull"] = 0.1
       PREFS["shotty@imp"] = 3.0


Stairwells: more steps to ensure wall lengths <= 128 units
            --> SEED_SIZE * max(sx_span, sy_span) / 128

Quests
  - sometimes lock another connection (ESP: symmetry)
    with the same lock as one we just added
    [ESP: when new lock goes to leaf or semi-leaf]

CONNECT:  for TC (etc) patterns, make the ones that branch at
          room corners less likely (i.e. prefer 1 or 2 seeds
          away from corner, though it depends on room size).

HEIGHTS: prevent any room from having more than 4 heights
         [tiny rooms: no more than 2]


GUI: merge structs: area_info + area_poly --> csg_brush_c


HEXEN lua: gui.property("hexen_format", "true")

SPEAR lua: gui.property("file_ext", "SOD")

EDGE: gui.property("solid_exfloor", 400)
      gui.property("liquid_exfloor", 406)
      gui.property("thing_exfloor_flags", "true")

LEGACY: gui.property("solid_exfloor", 281)
        gui.property("liquid_exfloor", 280)  -- 301


q1_nodes:
  -  floor_leaf --> leaf
  ?? move floor/ceiling faces into leaf.faces (instead of leaf.floor)

q2_nodes:
   use cluster=-1 for SOLID leafs

   create a solid leaf for each area_poly
   (can sometimes have 2+ area_polys per solid leaf, walls with stacked brushes)
   NOTE: need CONVEX brush sides : if not convex, find closest
         concave point to face and "chop" there
         _OR_: use bsp to chop em up
         _OR_: share a solid leaf for every empty leaf
   ALSO: handle co-planer sides (allowed by Oblige, maybe ok for Q2, not sure)


REWRITE:

- quest assignment

  ? pick rooms for BOSS monsters
  ? allocate seeds for teleporters,bosses,switches,items

- create doors, stairs/lifts

+ build Hallways:
  - for two exits, create optimal path (L shape)
  - for three exits (where two are opposite), optimal path (T shape)
  - for rooms >= 3x3 and 3+ exits, properly create O or U shape path
  - occasionaly: height diff, spaced steps (two exit only)
  - rarely: make a maze (large room only)



QUAKE:

+ fix bounding boxes for everything (especially Leafs)

+ create faces from stacked brushes behind a gap (cf. oa_dm7)

- clipping hulls:

++ grab Q1 textures directly from PAK files
   ??? code to check if data/quake_tex.wad exists
   ? gui.property("extra_tex_wad", "data/oq_tex.wad")
   ? gui.property("needed_pak",  "pak0.pak")

- create "oblige" logo miptex [.wal for QuakeII]

++ perform lighting

++ perform visibility

  ?? convert portal sides into portal faces


DOOM ENTITY PROPS:
  angle
  options
  tid
  special
  args


QUAKE1 ENTITY PROPS:
  light
  spawnflags
  target
  targetname
  speed
  next stop



General:

+  create special BOSS levels (e.g. E1M8, MAP30)

+  get traps (closets / depots) working again.

-  make the EASY skill much easier (less monsters)

-  Deathmatch: implement DM-Equipment module

-  FreeDoom: some scenery items (hanging gore) have no sprites

?  put all important constants/tables into defs.lua


GUI / C++:

-  ui_chooser: support last_file in WIN32
      maybe this: lpstrFile contains _base_ of file (FOO.EXT)
              and lpstrInitialDir contains _path_ of last file.
      probably only set it once (first call).

+  get the 'Unixy' type of installation working, and
   write a INSTALL.txt with some useful information.

-  on serious script errors: remember it, so that we
   don't try calling into LUA to write the config.

-  Batch mode:
   .  -b(atch) builds then quits
   .  -o(utput) for output filename
   .  set parameters via command-line : xxx=aaa yyy=bbb (non-options)
   .  option to read a different config file: -c(onfig)
   .  never writes the config file
   ?? what to do on error ??

-  improve icon for Win32 executable.

-  ideas for remaining button (YYY) :
   -  Secrets   (would be useless for DM)
   -  Powerups
   +  Outdoor-iness
   -  Lighting adjustment
   -  Big monster adjustment
   -  Linearity

-  make sure target dir is writable _before_ making levels.
   (have a "CheckDirWritable" function?)


SKY GENERATOR:

>>>  provide an API to the Lua code

-  background part: GRADIENT or CLOUDS or STARS

   GRADIENT params: colors
   CLOUD param: fracdim, powscale, squish, colors
   STARS param: powscale, cutoff, colors

-  foreground part: NONE or MOUNTAINS or BUILDINGS

   MOUNTAINS params: min_h, max_h, fracdim, powscale, colors
   BUILDINGS params: min_h, max_h, gap_size, colors, light_cols


DOOM

-  support keycards


HERETIC:

-  don't build Blaze doors into maps.

-  monsters: not mixed enough (too repetitive), no bosses.

-  weapons: firemace no good for SP/COOP ??


HEXEN:

-  put 'fighter only' bit on fighter's weapons, etc..

+  bug report: some doors close and never open.

+  rework teleporter gates (make them bi-directional).

+  fix key usage (REQUIRE both to get to boss level).


WOLF3d:

   + push-walls for secret quests!
   + secret elevators
   + bosses!

   - decide_monster : skills are "tiered"
   - health/ammo : no skills! -- use medium one
   - place_items : never where monsters are!
   - create rooms with 'endgame' object.

   + ensure limits are enforced:
     - MAXACTORS = 150  (remove actors at random)
     - MAXSTATS  = 400  (remove statics at random)
     - MAXDOORS  = 64   (remove unneeded doors at random)

   - patrolling monsters (need to create path with arrows).
   - secret levels (full of treasure)
   - something interesting in middle of big rooms.
   - elevator "entry" in first room.


Docs:

-  note that you need full version of XXX to play the games
   (shareware won't work).


Secrets:

-  fix battle simulator to ignore stuff got in secrets
   (push state onto stack, pop afterwards).

-  different item probs, e.g. invuln & berserk are good


Theme system:

-  Room types:

   (a) storage   (crates, barrels)
   (b) quarters  (tables, chairs, beds)
   (c) bathroom
   (d) computer
   (e) library

   (f) armoury | supplies
   (g) processing plant (machines)
   (h) torture  (wolf3d/SOD)


Monsters:

++  put in some Cyberdemons or Spider Masterminds

-  at each room, pick 2-3 (rarer: 1,4) monster types
   then decide how many of each one (for each skill).

-  monster adjustment: don't just increase toughness, actually
   create _more_ monsters.

-  battle_in_cell: arrange it so that cells could be visited
   in any area (as much as possible).  Allow e.g. multiple
   starting cells, "forked" paths (path splits and rejoins)...

   IDEA: treat groups of cells (esp: multi starts and forked
         paths) as a SINGLE BATTLE ARENA.

-  idea: horde_size depends on (pl_weap.fp - monst.fp)

-  cage monsters: don't put hitscan snipers up really high.


Miscellaneous:

+  don't put monsters/pickups/scenery on normal Prefabs.

+  prefabs: improve "kind" fields, allow "x_offset" fields
   default to 0.

-  make key doors open-and-stay-open.

-  WINDOW_CROSS and WINDOW_CROSS_BIG: do a height check
   (prevent windows you can walk through).


Pipe Dreams:

++ better global architecture, room-in-a-room.

+  teleporters!

+  make Oblige easier to mod.

-  bridges (activate by a switch)

-  light up levels (a la quake).

-  exit via teleporter pad or holes in floor

-  improved use of liquids.

-  "Horror" mode: fewer but tougher monsters, fewer ammo, darker levels.

-  a mod for Eternal III

-  CTF maps (boomctf) :

      5130 = "Blue flag";
      5131 = "Red flag";

      5080 = "Blue Start"      
      5081 = "Red Start"

?? one-way routes ??
   -  for example: at along:3 fall-off -> along:4
      BUT... how to get back to along:3 ??
      WITHOUT creating an alternative path?
      ANSWER: use another one-way connection

   - One way connections:
     (a) fall-offs
     (b) teleporters
     (c) doors that only open from one side (esp. via a switch)
     (d) lifts that go up (or down) into a hole
         (activated by a switch only on one side).


 ____________________
|KEY:                |
|    #  completed    |
|    -  plain item   |
|    +  important    |
|    >> in progress  |
|    ?? not sure     |
|____________________|

