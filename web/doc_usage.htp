<set O_WHERE="Usage">

<file include="x_common.inc">
<file include="x_header.inc">

<use DocMENU>

<div class="submenu">
<use SubSpacer>
<use SubWhere where="USAGE">
<use DocAbout>
<use DocCredits>
<use DocFAQ>
<use DocGlossary>
<use DocHistory>
</div>

<div class="rest">


<h3>QUICK START</h3>

First, unpack the zip somewhere (e.g. My Documents).
Make sure it is extracted with folders,
and also make sure the OBLIGE.EXE file is extracted too
(a few people have had the problem that Microsoft Windows
would skip the EXE, and they had to change something in the
internet control panel to get it extracted properly).

<p>
<img src="oblige_icon.png" width="64" height="64" border="0" class="floatR" alt="ICON">

Double click on the OBLIGE icon (shown right) to run it.
Select the target game in the top left panel,
and change any settings which take your fancy.
Then click the <span class="button">Build</span> button
in the bottom left panel,
and enter an output filename, for example "TEST"
(without the quotes).

<p>
OBLIGE will then build all the maps, showing a blueprint of
each one as it goes, and if everything goes smoothly the output
file, for example "TEST.WAD", will have been created.
Then you can play it using the normal method for playing
mods with that game, e.g. with modern DOOM source ports
dragging -n- dropping the WAD file onto the EXE
is usually enough.

<p>
<i>(Some games, especially Quake, may need special setup before
running Oblige.  See below for more information)
</i>


<h3>WINDOW LAYOUT</h3>

The following diagram shows the GUI for OBLIGE.
You can see that the window is divided into five distinct panels.
The panels are discussed in separate sections below.

<div class="guioverview">
<img src="gui_overview2.png" width="596" height="364" border="0" alt="SCREENSHOT">
</div>


<h3 id="game">GAME SETTINGS</h3>


<p>
The top left panel contains the most important settings.

<p>
These settings include:
<ul>
  <li>the <span class="button">Game</span> type (DOOM, HERETIC, etc...)
  <li>the <span class="button">Mode</span> of the game (SINGLE-PLAYER, CO-OP, or DEATHMATCH)
  <li>the <span class="button">Length</span> of the output wad (SINGLE-LEVEL, ONE-EPISODE, FULL-GAME).
</ul>

<h3 id="level">LEVEL ARCHITECTURE</h3>

The Level Architecture panel lets you control general features
of the maps, like what size they should be, what theme to use,
how much outdoor areas to make, and so forth.

<p>
Choosing "Mix It Up" as a setting means that different levels
will get different values (randomly).
For example, it makes the Size of maps vary between small and large.
However when using it for the Theme and
making a full game, each episode will stick to a single theme.

<p>
The "As Original" theme setting causes the themes in each episode
to try and match the original game.  Note: when there are custom
themes (from a module) the same ordering is not guaranteed
since a custom theme can replace one (or more) of them.


<h3 id="playing">PLAYING STYLE</h3>

This panel is all about the gameplay.
Here you can control the amount and strength of the
monsters, how much health and ammunition should be added, etc...

<p>
The <span class="button">Strength</span> button determines the
overall toughness of the monsters.
The "Medium" setting is designed to give a mix
of monsters similar to the levels in the original game.
Compared to that, the "Weak" setting produces weaker
monsters and the "Tough" setting gives tougher ones.
In all three cases the toughness increases over the
course of each episode.

<p>
The "Crazy" strength works a bit differently.
It forgets all about trying to make battles which are fair,
and throws any or all of the monsters at you, including bosses!
Be warned though, playing maps on this setting can actually
drive you insane -- hence the name.


<h3 id="modules">MODULES PANEL</h3>

Modules are a great new feature in Oblige V3.
The idea is that new functionality can be implemented
as a module file (Lua code),
and simply dropped into the 'modules' folder, and OBLIGE
will load it automatically and allow that module to
be enabled or disabled.
Modules can even have their own option buttons.

<p>
First thing you need to know is: modules are usually
specific to a single game, and will only show up in the
module panel when that game is selected.
Similarly they can depend on a certain engine (source port),
and might even depend on other modules.
E.g. a module which requires ZDoom will not be visible
until ZDoom is chosen in the Game Settings panel.
So changing the current game or the current engine
can cause some modules to appear and/or other modules
to disappear.

<p>
Modules are enabled or disabled by the check-box which appears
to the left of the module's name.  
Modules must be both enabled and shown
in order to have any effect, otherwise they do nothing.
When a module has options,
those options are not shown while the module is disabled
(though the option settings are not forgotten).


<h3 id="build">BUILD PANEL</h3>

Once you have chosen the desired settings,
press the <span class="button">Build</span> button.
This will open a Save-File dialog asking you what the output file
should be.
Enter something appropriate, e.g. TEST, and after that
OBLIGE will starting building the levels.

<p>
The levels created by OBLIGE are ready to play.  There is no
need to run the output WAD file through a nodes-builder,
since OBLIGE includes a built-in version of glBSP.



<!--- 
<h3>OPTIONS WINDOW</h3>

Blah blah blag
--->


<h3 id="quake">QUAKE SETUP</h3>

<p>
Quake levels have the unusual feature of including a full copy
of every texture which they use.
But this is a problem for OBLIGE, as it needs to get
these textures from somewhere.
We are not allowed to put a copy of them on 
SourceForge for you to download, because they are copyrighted
material belonging to Id Software.

<p>
The solution is to extract the textures using a program
called <b>qsavetex</b>, which is included with OBLIGE
in the 'tools' folder.  Here is what you need to do:

<ol class="qsavetex">

<li>copy the qsavetex program into the folder called <b>id1</b>
    which exists in your copy of Quake.  You can be sure it is
    the correct folder if it contains two files called
    pak0.pak and pak1.pak

<li>run qsavetex by double clicking on it

<li>refresh the folder. A file called <b>qsavetex_log.txt</b>
    should have appeared.  Read it (e.g. with NOTEPAD) to check
    whether the textures were extracted successfully.
    If something went wrong, this file should contain an
    error message in it

<li>lastly copy the <b>quake_tex.wd2</b> file into the 'data'
    folder where OBLIGE is installed

</ol>

You will know it has worked when OBLIGE can build some Quake
maps without any error message about missing texture wads.


<h3 id="misc">MISC NOTES</h3>

OBLIGE requires the full version of each game it supports.
It will NOT work properly with shareware or demo versions,
and never will.

<p>
Most games let you play at different skill levels,
for example: Hurt-Me-Plenty vs Ultra-Violence,
and OBLIGE takes them into account.
Easier skill levels will have less monsters than harder skill levels,
while health and ammo remain the same.

<p>
You should use a
<a href="doc_glossary.html#engine">Source Port</a>
to play the levels, because the original DOS versions,
such as DOOM.EXE and DOOM2.EXE,
cannot cope with the architecture which OBLIGE creates.
For example, you will probably get the "Visplane Overflow" error
which quits the game, or a crash when saving to a savegame.
(Note that <b>Chocolate-Doom</b> has the same limitations
as the original DOS versions, and should not be used either).

<p>
For Quake, call the output file <b>PAK2.pak</b> and place it
in the ID1 folder where Quake is installed.
Then start a game normally.
Delete the PAK2.pak file when you want to play the original
Quake levels.

<p>
Playing Quake 2 maps is similar to Quake, but place the <b>PAK2.pak</b>
file into the BASEQ2 folder where Quake 2 is installed, and
start a game normally.

</div class="rest">

<file include="x_footer.inc">

