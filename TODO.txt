
OBLIGE TODO
===========

Current Work
------------


TEXTURE COORDINATE SYSTEM

bottom texture: bu, bv fields in sides
top    texture: tu, tv fields in sides
(usually in every side, but if only a single one: axis aligned and 1:1 scale)

side texture: u1 and/or u2 in sides
              v1 and/or v2 in sides
(if only one of a pair: other is computed from length of side, i.e. 1:1 scale)
(can put v1 in t coord, v2 in b coords, for default value in sides)

new coord kind: vz = height, used with v1 or v2 to vertically anchor
all the side textures to a certain height (unless the provide v1 or v2).

x_offset is synonym for u1
y_offset is synonym for v1

DOOM and other games don't support scaling.  When both u1 and u2, or
v1 and v2 are present on brush sides, only u1 or v1 are used.
Similarly any floor/ceiling texture coordinates are ignored.

The 'peg' flag is only for DOOM-based engines, causing the texture to
move with the sector's floor or ceiling -- needed for doors and lifts.
This flag will change how texturing is applied (in the DOOM engine),
but has no effect on how the final y_offset is computed.


>>>  stairs / lift : standardize height stuff


++  think about how "mini halls" and "groups" interact

    --> groups only apply to connected hallways (2+ sections)
    
    --> mini_halls connect two rooms, or a room and big junction

    i.e. they are mutually exclusive


+  mini hall room connection control:
      _outdoor = 0 / 1
      _building = 0 / 1
      _cave = 0 / 1


Outdoor rooms: begin with whole space as "natural", create "constructed"
               intrusions into that space.


PATTERN AREA LOGIC:

??  allow the two area creation methods to co-exist, the grid system
    can take over after e.g. doing a bunch of try_XXX stuff.

-  sometimes with "PLAIN" fill, have two levels (two VHRs)
   require neighboring 2+ VHRS with a difference >= 2
   (or both in one seed).
 
?  support the "anchor" table



!!!  have 'z1_cap' and 'z2_cap' fields in a chunk, ensure all
     prefabs use it -- perhaps: Trans.set_cap(), Trans.clear_cap()

++  place importants AFTER deciding major areas, and do A* pathing
    separately for each area.

+  continue with unpatterned area logic:
   -  try_TWO_SIDE()
   -  try_THREE_SIDE()
   -  try_CORNER()
   -  try_EDGE()

?  put VOID in non-walk left-overs

-  when expanding a new area (A) which overlaps another (B), then
   have a kind of slow-down when A starts to overlap too much of B
   (especially when more than half of A is overlapping B).

?  try to surround a newly installed area with a new one
   with a VHR +/-1 from the previous.



-  REVIEW: quadratic monster formula : bad for "full" game


!!  replaceable brushes in prefabs

    +  use this mechanism to place windows and pictures


+  fix fat doors (x_ranges) : QUAKE


-----------------------------------------------------------------


Short-Term Goals
================


REVIEW: adjuster stuff 

-  fix monsters stuck in doors / corners of chunks

+  automatic repeating of prefabs
   x_repeat=192 : means we require: x_size / N >= x_repeat (for highest N)

   allow it to happen with prefab composition too

+  BUG: stairs in cycles can be too low to pass


-----------------------------------------------------------------


Release Goals
=============

+  windows

   -  must decide after all heights are done

+  pictures in walls

>>  secret niches

-  cages

-  normal doors

-  better ceilings, some ceiling lights

>>  better exits

Closets:
+  allow closet to be smaller than chunk, fill extra space with void

