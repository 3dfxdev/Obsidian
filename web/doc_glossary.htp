<set O_WHERE="Glossary">

<file include="x_common.inc">
<file include="x_header.inc">

<use DocMENU>

<div class="submenu">
<use SubSpacer>
<use DocUsage>
<use DocAbout>
<use DocCredits>
<use DocFAQ>
<use SubWhere where="GLOSSARY">
<use DocHistory>
</div>

<div class="rest">


<h3> GLOSSARY OF TERMS </h3>

<div id="brush" class="gloss_term">
Brush
</div><div class="gloss_define">
This is a term borrowed from Quake mapping.
A brush is a solid area in 3D space.
Levels are built by placing a lot of brushes everywhere.
For example, the floor you are standing on will be one brush,
and the ceiling overhead will another one.
Stuff like doors are built from many brushes.

<p>
In OBLIGE, brushes consists of a top face, a bottom face, and
a group of side faces.
The top and bottom are usually flat but may be sloped,
whereas the sides are always perfectly vertical.

<p>
<i>(See also.... CSG, Entity)</i>

</div>


<div id="connection" class="gloss_term">
Connection
</div><div class="gloss_define">
A place where two rooms are connected so the player can pass
between them.
Connections may be locked, so that the player needs to find a
key or switch to open it.
Archways and doors are the normal kinds of connections, but
other kinds (such as teleporters and one-way drop-offs) are
possible too.
</div>


<div id="csg" class="gloss_term">
CSG
</div><div class="gloss_define">
CSG stands for "Constructive Solid Geometry".
For OBLIGE it means the process of taking all the brushes
which define the map (most of them are solid), and constructing
the output map format from them, e.g. the Doom WAD file
or the Quake BSP file.
</div>


<div id="engine" class="gloss_term">
Engine / Port
</div><div class="gloss_define">
When Carmack released the DOOM source code, many different people
hacked away on it and produced their own version of the EXE,
often with greatly expanded capabilities.  Examples include BOOM,
EDGE, Legacy and ZDoom.
The same thing happened when he released the QUAKE source code,
people made engines such as Darkplaces, FitzQuake, and ZQuake.

<p>
Hence the term "Engine" or "Source Port" usually refer to one of
these enhanced versions of the game, but it can also mean the original
EXE which the game came with when you bought it.  That one is
often called "Vanilla", since nothing extra has been added to it.

<p>
<i>(See also.... Limit Removing)</i>

</div>


<div id="entity" class="gloss_term">
Entity
</div><div class="gloss_define">
This is another term from Quake, and means an object or thing in the map.
Monsters, weapons, player starts, ammo, health, barrels, torches (etc etc)
are all entities.
</div>


<div id="gui" class="gloss_term">
GUI, EXE
</div><div class="gloss_define">
GUI stands for Graphical User Interface,
but I often use the term to mean the whole EXE
(executable program) of OBLIGE,
which is responsible not only for all the interactive
elements (like the "Game" and "Build" buttons,
the scrolling module panel, and the map preview),
but also for doing CSG operations and
creating the output map formats.

<p>
This is in contrast to the Lua scripts which handle all the
logic for building levels (e.g. deciding where to put rooms
and how big they should be).
The Lua code is not stored inside the EXE,
instead it is loaded from various folders
when OBLIGE starts up.

<p>
<i>(See also.... CSG, Lua)</i>

</div>


<div id="limit_removing" class="gloss_term">
Limit Removing
</div><div class="gloss_define">
A "Limit Removing" engine is one which people have removed some
limitations that the original game had.
For example, plain DOOM.EXE will crash if there are more than 128
visplanes on the screen -- the VPO (Visplane Overflow) error which
was a real headache for mappers.

<p>
However source ports like BOOM have removed this limitation
(and others), and there can be as many visplanes on the screen
as necessary to draw the level.

<p>
OBLIGE needs a Limit Removing engine because it is impossible
for it to figure out when the visplane limit is going to be
exceeded -- it depends greatly on the architecture of the map.
The only way to keep within those limitations would be to
produce very flat, boring, mostly-indoor maps with nothing
much to look at.
</div>


<div id="lua" class="gloss_term">
Lua
</div><div class="gloss_define">
Lua is a programming language used for all the level building
logic in OBLIGE.
The files in the <b>scripts/</b>, <b>games/</b>, <b>engines/</b> and
<b>modules/</b> folders are all Lua scripts.
You can edit these ".lua" files with an ordinary
text editor (like NOTEPAD, but <u>not</u> MS Word),
and those changes will be loaded the next time OBLIGE is run.
This is very convenient, since you don't need to compile anything.

<p>
Visit the <a href="http://www.lua.org">Lua home page</a>
to discover more about this great programming language.
</div>


<div id="material" class="gloss_term">
Material
</div><div class="gloss_define">
With standard DOOM, there are two types of textures: one for walls
and one for floors or ceilings.
The first kind are called "textures" and the second kind "flats",
and they are a nuisance because you cannot use flats on walls or
textures on floors.

<p>
So in OBLIGE, a "Material" is just a single name which can specify both
parts (wall texture and floor flat),
and the code makes sure to use them correctly 
(put the texture name on walls and the flat name on floors and ceilings).
This makes a lot of things much simpler, as you only need to
give the material name and not worry about the kind of surface
it will be used on.

<p>
While material names can be anything,
they usually match the name of one of their components.
For example the DOOM materials "SHAWN2" and "FLAT23" are equivalent
(they both specify <b>SHAWN2</b> as the wall texture
and <b>FLAT23</b> as the flat)
and hence they can be used interchangeably in OBLIGE.
<!---
The special "_SKY" material is an example of where the name does
not match either the wall texture or flat name.
--->

<p>
Other games allow textures to be placed anywhere.
However there are usually some which look good on walls
but not on floors, and vice versa.
So this material system is be useful for these games too.

<p>
In the future the material definitions may include more
information, such as the general hue, tiling properties
or even if it should emit light.
This could be used to make better decisions about the
selection and usage of materials.
</div>


<!---
[div id="mega_seed" class="gloss_term"]
Mega-Seed
[/div][div class="gloss_define"]
An area on the map consisting of more than one seed, used to
create larger structures (like wide doors or big prefabs)
which normally cannot fit in a single seed.

[p]
[i](See also.... Seed)[/i]

[/div]
--->


<div id="palette" class="gloss_term">
Palette
</div><div class="gloss_define">
This means a selection of certain things, especially monsters.
Each room has its own monster palette, and only those monsters
will be used in that room.
There is also a "global" palette which controls what monsters
may or may not appear in the level.
These palettes help give each room and each level a distinctive
feel.

</div>


<div id="prefab" class="gloss_term">
Prefab
</div><div class="gloss_define">
A mapping structure, such as a window or door, whose shape
and texturing have been previously designed by a person.
This is in contrast to stuff like caves which are generated
purely by an algorithm.
</div>


<div id="prebuilt_level" class="gloss_term">
Prebuilt Level
</div><div class="gloss_define">
Levels which are not generated by OBLIGE, instead they are
made by a human and OBLIGE merely copies them into the
output file.
Boss maps usually have special requirements which are
hard to account for.
It is much easier for someone to simply make them
in a map editor.
</div>


<div id="quest" class="gloss_term">
Quest
</div><div class="gloss_define">
A group of rooms with a particular goal, usually
a key or switch which allows progression to the next quest.
The final quest always leads to the exit room of the level.
</div>


<div id="scenic" class="gloss_term">
Scenic
</div><div class="gloss_define">
A room or area which the player never visits, and is only used
for decoration.
</div>


<div id="section" class="gloss_term">
Section
</div><div class="gloss_define">
A rectangular area on the map used for placing rooms
during the planning phase.
Each section is between 2 and 6 seeds wide, and similarly for
its height (on the 2D map).
While small rooms are just a single section, large rooms can
be formed from a group of sections -- usually a rectangle --
but other shapes are possible too.
</div>


<div id="seed" class="gloss_term">
Seed
</div><div class="gloss_define">
In the GUI, the seed is a 6-digit value which is used to
setup the random-number generator.  The same seed value
produces the same random numbers, and hence the same levels
(when all other settings are the same).
The top four digits are guaranteed to be different on
different days, so it would take about 27 <i>years</i> before
they start repeating.
The '+' (Bump) button only changes the bottom two digits.

<p>
In the Lua code, a seed is a square region on the 2D map.
At the moment the size is 192x192 units,
but this may change in the future.
Each seed represents a single mapping concept,
such as a walkway, stair, lift, switch, pillar, or a spot for a
monster.  The sides of each seed can be used for walls, doors,
windows, etc...
The decisions about where to place rooms, how big they are,
and how they are connected are all done using seeds.
</div>


<div id="skin" class="gloss_term">
Skin
</div><div class="gloss_define">
Skins are used with prefabs, and are tables containing all
the materials (i.e. textures) to use on the prefab.
Hence they are a similar concept to skins used on models
(like MD2 or MD3), where the model defines the 3D shape
and the skin defines what it looks like.

<p>
Skins can also specify other properties, for example
the skin of the PICTURE prefab
must specify the width and height of the picture part,
and the skin for doors and lifts must specify what
linedef types to use (for DOOM anyway).
</div>


<div id="sub_room" class="gloss_term">
Sub-Room
</div><div class="gloss_define">
A room which lies inside another room.  The sub-room is also
called the child and the outer room is the parent.
</div>


<!---
Sub-Theme
--->


<div id="svn" class="gloss_term">
SVN
</div><div class="gloss_define">
SVN is short for Subversion, which is a development tool
for storing code on a server computer and letting multiple
people edit that code, using copies on their own computers.
It ensures that each developer's
changes get distributed to everyone else.
It also stores a history of all changes, where each change
has message describing what was done.

<p>
You can view OBLIGE's SVN respository here:
<a href="http://oblige.svn.sourceforge.net/viewvc/oblige/trunk">
Browse Code</a>

<!--- LINK to subversion sight or SourceForge page about it --->

</div>
  

<div id="versions" class="gloss_term">
V1 &nbsp; V2 &nbsp; V3 &nbsp; V4
</div><div class="gloss_define">
These designate the major versions of OBLIGE.
V1 was merely a prototype and was never publicly released.
V2 and V3 are older versions and are no longer being developed.
V4 is the latest codebase.

<p>
<i>(see the <a href="doc_history.html">History</a> page for
more detailed information about OBLIGE versions)</i>

</div>


</div class="rest">

<file include="x_footer.inc">

