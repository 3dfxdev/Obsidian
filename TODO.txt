
OBLIGE TODO
===========

Current Work
------------


++  think about how "mini halls" and "groups" interact

    --> groups only apply to connected hallways (2+ sections)
    
    --> mini_halls connect two rooms, or a room and big junction

    i.e. they are mutually exclusive


+  mini hall room connection control:
      _num_outdoor  = 0 / 1 / 2
      _num_building = 0 / 1 / 2
      _num_cave     = 0 / 1 / 2

      Hmmm, same as _outdoor = 0/1, _building = 0/1 etc ??


PATTERN AREA LOGIC:

!!  de-grid-ify latest logic
    Instead: any part of a room can be a "grid" (including a single seed)
             and can find grid via SEED.grid field
             automatically handle grids < 3x3 in size as "PLAIN"

    ALSO: create chunks when installing a pattern (or "PLAIN")

!!!  stairs

+  allow the two area creation methods to co-exist, the grid system
   can take over after e.g. doing a bunch of try_XXX stuff.

   [YES! : grid system replaces the grow_random stuff]


>>>  ability to test and install patterns

??  when chunk positioning fails, no need to try other VHRs

+  support the "anchor" table



AREA ALGORITHM #627
===================

(1) there are "virtual height ranges" (VHR) numbered 1 to 9.
    at the end of the algorithm they will get actual heights
    (most simplistic way is to multiply the number by 128).

(2) AREA = a VHR number occupying a group of contiguous seeds.
    In truly 3D games, areas can overlap other ones with a
    different VHR (perhaps prefer a diff >= 2).
    In 2.5D games (without extrafloors), areas cannot overlap.

(3) two areas which touch or overlap MUST NOT have the same VHR.

(4) began by adding zero or more areas in the middle of a room
    (e.g. around reclaimed junctions).
    These islands should not touch.
    Give them VHR numbers in the range 4 to 6.
 
(5) add areas to remaining space, ensuring that each new area
    does not use the same VHR number as any areas that it touches
    or overlaps.  Repeat until all seeds in the room are used
    (and perhaps a few more times for 3D areas).

    Can merge an area into an existing one if the new area would
    be too small, so long as existing area is not going to touch
    another area with same VHR number.

(6) VHR #1 is reserved for a crossover channel / low intrusion
    VHR #9 is reserved for a crossover bridge / high intrusion
    The shapes of those areas can be arbitrary.


!!!  have 'z1_cap' and 'z2_cap' fields in a chunk, ensure all
     prefabs use it -- perhaps: Trans.set_cap(), Trans.clear_cap()

++  place importants AFTER deciding major areas, and do A* pathing
    separately for each area.

+  continue with unpatterned area logic:
   -  try_TWO_SIDE()
   -  try_THREE_SIDE()
   -  try_CORNER()
   -  try_EDGE()

-  put VOID in non-walk left-overs

-  when expanding a new area (A) which overlaps another (B), then
   have a kind of slow-down when A starts to overlap too much of B
   (especially when more than half of A is overlapping B).

?  try to surround a newly installed area with a new one
   with a VHR +/-1 from the previous.



-  REVIEW: quadratic monster formula : bad for "full" game


!!  replaceable brushes in prefabs

    +  use this mechanism to place windows and pictures


+  fix fat doors (x_ranges) : QUAKE


-----------------------------------------------------------------


Short-Term Goals
================


REVIEW: Fence code  [some Street mode rooms lack fences]

REVIEW: adjuster stuff 

-  fix monsters stuck in doors / corners of chunks

+  automatic repeating of prefabs
   x_repeat=192 : means we require: x_size / N >= x_repeat (for highest N)

   allow it to happen with prefab composition too

+  BUG: stairs in cycles can be too low to pass


-----------------------------------------------------------------


Release Goals
=============

+  windows

   -  must decide after all heights are done

+  pictures in walls

>>  secret niches

-  cages

-  normal doors

-  better ceilings, some ceiling lights

>>  better exits

Closets:
+  allow closet to be smaller than chunk, fill extra space with void

